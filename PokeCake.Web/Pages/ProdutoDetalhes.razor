@page "/ProdutoDetalhes/{Id:int}"

@if (Produto is null && MensagemErro is null)
{
    <ExibirSpinner />
} else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
} else
{
    <p class="titulo-categoria">Detalhes do Produto</p>
    <MudCard >
        <MudGrid>
            <MudItem>
                <MudImage ObjectFit="ObjectFit.Contain" Height="300" Width="300" Src="@Produto.Imagem" Alt="Örebro Slott" Elevation="25" Class="rounded-lg" />
            </MudItem>
            <div class="dados-texto">
                <MudCardContent>
                    <p Class="nome-item">@Produto.Nome</p>
                    <p Class="descricao-item">@Produto.Descricao</p>
                    <p Class="preco-item">@Produto.Preco.ToString("c")&nbsp;(@Produto.Quantidade itens em estoque)</p>
                </MudCardContent>
                <MudCardActions>

                    <MudButton StartIcon="@Icons.Material.Filled.AddShoppingCart" Variant="Variant.Filled" Color="Color.Primary" OnClick="ClickAdicionaItem">Adicionar ao carrinho</MudButton>

                    
                </MudCardActions>

            </div>
        </MudGrid>
    </MudCard>
}

@code {
    [Inject]
    public IProdutoService? ProdutoService { get; set; }
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }
    [Inject]
    public NavigationManager? NavigationManager { get; set; }

    [Inject]
    public IGerenciaProdutosLocalStorageService GerenciaProdutosLocalStorageService { get; set; }

    [Inject]
    public IGerenciaCarrinhoItensLocalStorageService GerenciaCarrinhoItensLocalStorageService { get; set; }

    private List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    [Parameter]
    public int Id { get; set; }

    public ProdutoDto? Produto { get; set; }
    public string? MensagemErro { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await GerenciaCarrinhoItensLocalStorageService.GetCollection();
            Produto = await GetProdutoPorId(Id);
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    protected async Task AdicionarAoCarrinho_Click(CarrinhoItemAdicionaDto carrinhoItemAdicionaDto)
    {
        try
        {
            var carrinhoItemDto = await CarrinhoCompraService.AdicionaItem(carrinhoItemAdicionaDto);

            if (carrinhoItemDto != null) 
            {
                CarrinhoCompraItens.Add(carrinhoItemDto);
                await GerenciaCarrinhoItensLocalStorageService.SaveCollection(CarrinhoCompraItens);
            }

            NavigationManager.NavigateTo("/CarrinhoCompra");

        }
        catch (Exception)
        {

            throw;
        }
    }

    async Task ClickAdicionaItem()
    {
        AdicionarAoCarrinho_Click(new CarrinhoItemAdicionaDto
            {
                CarrinhoId = UsuarioLogado.CarrinhoId,
                ProdutoId = Produto.Id,
                Quantidade = 1
            });
    }

    private async Task<ProdutoDto> GetProdutoPorId(int id)
    {
        var produtosDto = await GerenciaProdutosLocalStorageService.GetCollection();

        if (produtosDto != null)
        {
            return produtosDto.SingleOrDefault(p => p.Id == id);
        }
        return null;
    }
}
