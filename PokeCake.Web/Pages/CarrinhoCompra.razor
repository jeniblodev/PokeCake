@page "/CarrinhoCompra"

@if (CarrinhoCompraItens == null && MensagemErro == null)
{
    <ExibirSpinner/>
} else if (MensagemErro != null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
} else
{
    <h3>Carrinho</h3>
    @if (CarrinhoCompraItens.Count() > 0)
    {
        <MudItem>
        @foreach (var item in CarrinhoCompraItens)
        {
            
                <MudCard>
                    <MudGrid>
                        <MudItem>
                            <MudImage ObjectFit="ObjectFit.Contain" Height="100" Width="100" Src="@item.ProdutoImagem" Alt="Örebro Slott" Elevation="25" Class="rounded-lg" />
                        </MudItem>
                        <MudItem>
                            <MudCardContent>
                                <MudText Typo="Typo.h5">@item.ProdutoNome</MudText>
                                <MudText Typo="Typo.body2">@item.ProdutoDescricao</MudText>
                                <MudText Typo="Typo.body2">@item.Preco.ToString("c")</MudText>
                                <MudNumericField Label="Outlined" Variant="Variant.Outlined" @bind-Value="@item.Quantidade" />
                            </MudCardContent>
                            <MudCardActions>
                                
                                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="(()=> AtualizaQuantidadeCarrinhoClick(item.Id, item.Quantidade))">Atualizar</MudButton>
                                <br>
                                <MudButton Variant="Variant.Text" Color="Color.Warning" OnClick="(()=> DeletarCarrinhoItem(item.Id))">Excluir</MudButton>
                                


                            </MudCardActions>

                        </MudItem>
                    </MudGrid>
                </MudCard>      
        }
        </MudItem>
        <MudItem>
            <MudCard>
                <MudCardContent>
                    <MudText>Carrinho - Resumo</MudText>
                    <MudText Typo="Typo.body2">Total: (@QuantidadeTotal itens)&nbsp;<br />@PrecoTotal</MudText>
                </MudCardContent>
                <MudCardActions>
                    <MudButton Variant="Variant.Text" Color="Color.Primary">Finalizar Pedido</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>

    } else
    {
        <h3>Seu carrinho está vazio</h3>
    }
}

@code {
    [Inject]
    public ICarrinhoCompraService? CarrinhoCompraService { get; set; }

    public List<CarrinhoItemDto>? CarrinhoCompraItens { get; set; }

    public string? MensagemErro { get; set; }
    protected string? PrecoTotal { get; set; }
    protected int QuantidadeTotal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            CarrinhoCompraItens = await CarrinhoCompraService.GetItens(UsuarioLogado.UsuarioId);

            CalculaResumoCarrinhoTotal();
        }
        catch (Exception ex)
        {

            MensagemErro = ex.Message;
        }
    }

    protected async Task DeletarCarrinhoItem(int id)
    {
        var carrinhoItemDto = await CarrinhoCompraService.DeletaItem(id);

        await RemoveCarrinhoItem(id);
        CalculaResumoCarrinhoTotal();
    }

    protected async Task AtualizaQuantidadeCarrinhoClick(int id, int quantidade)
    {
        try
        {
            if (quantidade > 0)
            {
                var atualizaItemDto = new CarrinhoItemAtualizaQuantidadeDto
                    {
                        CarrinhoItemId = id,
                        Quantidade = quantidade
                    };
                var retornaItemAtualizadoDto = await CarrinhoCompraService.AtualizaQuantidade(atualizaItemDto);

                AtualizaPrecoTotalItem(retornaItemAtualizadoDto);
                CalculaResumoCarrinhoTotal();
            } else
            {
                var item = CarrinhoCompraItens.FirstOrDefault(i => i.Id == id);
                if (item is not null)
                {
                    item.Quantidade = 1;
                    item.PrecoTotal = item.Preco;

                }
            }
        }
        catch (Exception)
        {

            throw;
        }
    }

    private CarrinhoItemDto GetCarrinhoItem(int id)
    {
        return CarrinhoCompraItens.FirstOrDefault(i => i.Id == id);
    }

    private async Task RemoveCarrinhoItem(int id)
    {
        var carrinhoItemDto = GetCarrinhoItem(id);
        CarrinhoCompraItens.Remove(carrinhoItemDto);
    }

    private void SetPrecoTotal()
    {
        PrecoTotal = CarrinhoCompraItens.Sum(p => p.PrecoTotal).ToString("c");
    }

    private void SetQuantidadeTotal()
    {
        QuantidadeTotal = CarrinhoCompraItens.Sum(p => p.Quantidade);
    }

    private void CalculaResumoCarrinhoTotal()
    {
        SetPrecoTotal();
        SetQuantidadeTotal();
    }

    private void AtualizaPrecoTotalItem(CarrinhoItemDto carrinhoItemDto)
    {
        var item = GetCarrinhoItem(carrinhoItemDto.Id);

        if (item != null)
        {
            item.PrecoTotal = carrinhoItemDto.Preco * carrinhoItemDto.Quantidade;
        }
    }
}

